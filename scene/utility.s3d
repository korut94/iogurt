#ifndef UTILITY_H
#define UTILITY_H

function forward(obj) {
	var transform = obj.GetModelMatrix();
	return [transform[8], transform[9], transform[10]];
}

function fromMatrix4ToMatrix3(m4) {
	return [
		m4[0], m4[1], m4[2],
		m4[4], m4[5], m4[6],
		m4[8], m4[9], m4[10]
	];
}

function globalPosition(obj) {
	var transform = obj.GetModelMatrix();
	return [transform[12], transform[13], transform[14]];
}

function globalRotation(obj) {
	var transform = obj.GetModelMatrix();
	return [
		transform[0], transform[1], transform[2], 0,
		transform[4], transform[5], transform[6], 0,
		transform[8], transform[9], transform[10], 0,
		0, 0, 0, 1
	];
}

function linearInterpolation(from, to, p) {
	return from + p * (to - from);
}

function max(v) {
	var nMax = v[0];
	
	for (var i = 1; i < len(v); i++) {
		nMax = (nMax < v[i]) ? v[i] : nMax;
	}
	
	return nMax;
}

function min(v) {
	var nMin = v[0];
	
	for (var i = 1; i < len(v); i++) {
		nMin = (nMin < v[i]) ? nMin : v[i];
	}
	
	return nMin;
}

function rightward(obj) {
	var transform = obj.GetModelMatrix();
	return [transform[0], transform[1], transform[2]];
}

function rotationMatrixX(angle) {
	return [
		1, 0, 0, 0,
		0, cos(angle), sin(angle), 0,
		0, -sin(angle), cos(angle), 0,
		0, 0, 0, 1
	];
}

function rotationMatrixY(angle) {
	return [
		cos(angle), 0, -sin(angle), 0,
		0, 1, 0, 0,
		sin(angle), 0, cos(angle), 0,
		0, 0, 0, 1 
	];
}

function rotationMatrixZ(angle) {
	return [
		cos(angle), sin(angle), 0, 0,
		-sin(angle), cos(angle), 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1
	];
}

function sign(number) {
	return (number < 0.0) ? -1 : 1;
}

function toGlobal(obj) {
	var globalObj = CVmObj();
	
	globalObj.SetPosition(globalPosition(obj));
	globalObj.SetRotationMatrix(globalRotation(obj));
	
	var mesh = obj.GetMesh();
	if (mesh != VOID) globalObj.LinkToMesh(mesh);
	
	return globalObj; 
}

function upward(obj) {
	var transform = obj.GetModelMatrix();
	return [transform[4], transform[5], transform[6]];
}

#endif // UTILITY_H
