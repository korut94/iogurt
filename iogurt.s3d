/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>

#include "application.s3d"

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

var __application = Application();

/* Camera globals */
var step = 0;
var RotX= 0, RotY=0; 
var CamDir = [0,0,1];		//camera direction
var CamPos = [0.0,1.0,10.0];  	//camera position

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);

function OnInit(params)
{
	__application.init(params);
}

function OnFrame()
{
	__application.render();
	
	SceneBegin();
	glClearColor(1.0, 1.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	
	DrawGrid([0.5, 0.5, 0.5], 100);
	
	glBegin(GL_QUADS);
	glNormal(0,0,1);
	glVertex(1.0,1.0,1.0);
	glVertex(-1.0,1.0,1.0);
	glVertex(-1.0,-1.0,1.0);
	glVertex(1.0,-1.0,1.0);
	
	glNormal(0,0,-1);
	glVertex(-1.0,1.0,-1.0);
	glVertex(1.0,1.0,-1.0);
	glVertex(1.0,-1.0,-1.0);
	glVertex(-1.0,-1.0,-1.0);
	
	glNormal(1,0,0);
	glVertex(1.0,1.0,1.0);
	glVertex(1.0,-1.0,1.0);
	glVertex(1.0,-1.0,-1.0);
	glVertex(1.0,1.0,-1.0);
	
	glNormal(-1,0,0);
	glVertex(-1.0,-1.0,1.0);
	glVertex(-1.0,1.0,1.0);
	glVertex(-1.0,1.0,-1.0);
	glVertex(-1.0,-1.0,-1.0);
	
	glNormal(0,1,0);
	glVertex(1.0,1.0,-1.0);
	glVertex(-1.0,1.0,-1.0);
	glVertex(-1.0,1.0,1.0);
	glVertex(1.0,1.0,1.0);
	glEnd();
	
	SceneEnd();
}

function OnTimer()
{
	__application.update();
}

function OnEvent(eventID, wparam, lparam)
{
	__application.event(eventID, wparam, lparam);
}

function DownloadReady(RequestID) {}
function OnDownload() {}
function OnError(){}
function OnExit() {}

// Camera manager (using mouse)
function CameraMoveMouse()
{
	static var InMouseR = false, InMouseL = false;				
	static var PrecX = 0, PrecY = 0;			
	if(Mouse.ButtonL)
  	{
  		if( InMouseL )
   		{
		    Rotx += (Mouse.X - PrecX)/50.0;
		    Roty += (Mouse.Y - PrecY)/50.0;
		    CameraSetRotation(Roty, 1,0,0);
		    CameraRotate(Rotx , 0,1,0 );
		   }
	  	else
   		{
	   		PrecX = Mouse.X;
   			PrecY = Mouse.Y;
   		}
 	 	InMouseL = true;
  	}
 	else
  		InMouseL = false;

 	if(Mouse.ButtonR)
  	{
  		if( InMouseR )
   		{
   			CamPos = CameraGetPosition();
   			CamDir = CameraGetDirection();
   			step = ( PrecY - Mouse.Y) /150.0; 
			CamPos[0] += step*CamDir[0];
			CamPos[1] += step*CamDir[1];
			CamPos[2] += step*CamDir[2];
   			CameraSetPosition( CamPos );
    		}
  		else
   		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
   		}
		InMouseR = true;
  	}
	else
		InMouseR = false;
}


function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
