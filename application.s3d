#ifndef APPLICATION_H
#define APPLICATION_H

#include "device/mousekeyboard.s3d"
#include "graphics/window.s3d"
#include "human/human.s3d"
#include "human/gadget/hud.s3d"
#include "human/gadget/selectionray.s3d"
#include "scene/world.s3d"

class Application 
{
	var m_human;
	var m_player;
	var m_window;
	var m_world;
	
	event(eventId, wparam, lparam);
	init(params);
	render();
	update();
	updateView(view);
};

function Application::Application() {
	m_human 	= Hud(SelectionRay(Human()));
	m_player 	= MouseKeyboard();
	m_window 	= Window();
	m_world 	= World();
	
	m_human.applyTo(m_world);
}

function Application::event(eventId, wparam, lparam) {
	m_player.processEvent(
		eventId,
		wparam, lparam,
		m_human.getCommandQueue(),
		m_window
	);
}

function Application::init(params) {
	/* initialize light */
	var Light0 = CVmLight();
	Light0.SetPosition([0.0, 10.0, 10.0]);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();
	
	m_human.init();
	
	var meshBox = CVmNewMesh(VRP_BOX, 0, [0,0,0], [5, 5, 5]);
	var meshBox2 = CVmNewMesh(VRP_BOX, 0, [0,0,0], [3,3,3]);
	
	var box = Object();
	box.getCVmObj().LinkToMesh(meshBox);
	meshBox.CenterBoundingBox();
	
	var box2 = Object();
	box2.getCVmObj().LinkToMesh(meshBox2);
	meshBox.CenterBoundingBox();
	
	m_world.addRootToDraw(box.getCVmObj());
	m_world.addRootToDraw(box2.getCVmObj());
	m_world.trackObject(box);
	m_world.trackObject(box2);
	
	box.getCVmObj().SetPosition([20, 5, 20]);
	box2.getCVmObj().SetPosition([0, 5, 0]);
}

function Application::render() {
	updateView(m_human.getView());
	
	SceneBegin();
	// Getting the actual size (width and heigth) of the viewport
	var res = glGet(GL_VIEWPORT);
	m_window.setSize(res[2], res[3]);
	
	m_world.draw();
	SceneEnd();
	
	m_player.restart();
}

function Application::update() {
	m_human.processCommands();
	m_world.update();
}

function Application::updateView(view) {
	CameraSetPosition(view.position);
	CameraSetDirection(view.direction);
}

#endif // APPLICATION_H
