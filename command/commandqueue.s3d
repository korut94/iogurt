#ifndef COMMANDQUEUE_H
#define COMMANDQUEUE_H

#define SIZE_COMMAND_QUEUE 100

class CommandQueue
{
	var m_buffer;
	var m_lastCommand;
	var m_startCommand;
	
	capacity();
	isEmpty();
	pop();
	push(command);
	size();
};

function CommandQueue::CommandQueue() {
	m_buffer = Array(SIZE_COMMAND_QUEUE);
	m_lastCommand = 0;
	m_startCommand = 0;
}

function CommandQueue::capacity() {
	return SIZE_COMMAND_QUEUE;
}

function CommandQueue::isEmpty() {
	return (m_lastCommand == m_startCommand);
}

function CommandQueue::pop() {
	var command = m_buffer[m_startCommand++];
	
	if (m_startCommand == SIZE_COMMAND_QUEUE) {
		m_startCommand = 0;
	}
	
	return command;
}

function CommandQueue::push(command) {
	m_buffer[m_lastCommand++] = command;
	
	// Restart to fill at the beginning of the buffer
	if (m_lastCommand == SIZE_COMMAND_QUEUE) {
		m_lastCommand = 0;
	// The size of the buffer is too short! Overwriting command is arised.
	// Note that the overwriting error should occurred only in pushing phase
	// since only after push one other push can be follow.
	} else if (m_lastCommand == m_startCommand) {
		OutputLN("Potential overwriting!!");
	}
}

function CommandQueue::size() {
	return abs(m_lastCommand - m_startCommand);
}

#endif // COMMANDQUEUE_H
