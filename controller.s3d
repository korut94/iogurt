#define ID 			0
#define W_PARAM		1
#define L_PARAM		2

class Controller
{
	var m_currentEvent;
	
	isKeyPressed(eventId);
	processEvents(eventQueue, lastEvent, sizeEventQueue);
	processEvent(event);
};

function Controller::Controller() {
	m_currentEvent = 0;
}

function Controller::isKeyPressed(eventId) {
	return (eventId == 256 || eventId == 258);
}

function Controller::processEvent(event) {
	if (isKeyPressed(event[ID]) && event[W_PARAM] == 83) {
		var cameraPos = CameraGetPosition();
		cameraPos[2] += 0.5;
		CameraSetPosition(cameraPos); 
	}
}

function Controller::processEvents(eventQueue, lastEvent, sizeEventQueue) {
	// The buffer for the events is a circular list, so in the case
	// that the number of events exceeds the list's size, a part of the
	// events are pushed in the last part of the list and the stragglers
	// in its first part. In that case m_currentEvent will be grater
	// than the value of the __last_event.
	
	// This to scan only the last part so to keep the while's
	// invariant that m_currentEvent is less or equal than __last_event.
	if (m_currentEvent > lastEvent) {
		for (var i = m_currentEvent; i < sizeEventQueue; i++) {
			processEvent(eventQueue[i]);
		}
		
		m_currentEvent = 0;
	}
	
	while (m_currentEvent < lastEvent) {
		processEvent(eventQueue[m_currentEvent++]);
	}
}