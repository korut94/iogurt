#ifndef WINDOW_H
#define WINDOW_H

#include "../scene/utility.s3d"

extern function SetXVRWindowFullScreen;

#define WINDOW_HEIGHT	1
#define WINDOW_WIDTH	0

class Window
{
	var m_centerNearPos;
	var m_centerFarPos;
	var m_isFullScreen;
	var m_mouseWindowPos;
	// Coordinate relative to the pointer over the viewfrustum's far plane
	var m_mouseFarPos;
	// Coordinate relative to the pointer over the viewfrustum's near plane
	var m_mouseNearPos;
	// 2D vectory with the shape [width,heigth] 
	var m_size;
	
	getSize();
	height();
	isFullScreen();
	mouseWindowPosition();
	mouseWorldPosition(distanceFromNear);
	/*
	 * @brief Get the offset of the cursor in world coordinate respect to the
	 * coordinate system below:
	 * - x axis leftward
	 * - y axis upward
	 * - z axis foward. 
	 * The resulting vector keeps the offset long the axis x, the offset long
	 * the axis y and the value of the distance from near passed by argument as
	 * z value.
	 */
	offMouseWorldPosition(distanceFromNear);
	setFullScreen();
	setSize(width, height);
	updateInfo();
	width();
};

function Window::Window() {
	m_size = [0, 0];
	m_centerNearPos = [0,0,0];
	m_centerFarPos = [0,0,0];
	m_mouseWindowPos = [0,0,0];
	m_mouseFarPos = [0,0,0];
	m_mouseNearPos = [0,0,0];
	m_isFullScreen = false;
}

function Window::getSize() {
	return m_size;
}

function Window::height() {
	return m_size.y;
}

function Window::isFullScreen() {
	return m_isFullScreen;
}

function Window::mouseWindowPosition() {
	return m_mouseWindowPos;
}

function Window::mouseWorldPosition(distanceFromNear) {
	var camera = CameraGetCurrent();
	var depth = distanceFromNear / (camera.GetZFar() - camera.GetZNear());
	// Getting the intermediate point by linear interpolation
	return linearInterpolation(m_mouseNearPos, m_mouseFarPos, depth);
}

function Window::offMouseWorldPosition(distanceFromNear) {
	var camera = CameraGetCurrent();
	var depth = distanceFromNear / (camera.GetZFar() - camera.GetZNear());
	// Offset from the mouse's world coordinates to the center window's world coordinates
	var offset = linearInterpolation(m_mouseNearPos, m_mouseFarPos, depth) - linearInterpolation(m_centerNearPos, m_centerFarPos, depth);
	// Independent Orientation oFfset, apply the rotation matrix to make the offset unalterable from
	// the changes of the camera's orientation.
	var iof = MatrixMultiplyVector_4(camera.GetRotationMatrix(), [offset.x, offset.y, offset.z, 1.0]);
	
	return [-iof.x, iof.y, distanceFromNear];
}

function Window::setFullScreen() {
	m_isFullScreen = true;
	SetXVRWindowFullScreen(true);
}

function Window::setSize(width, height) {
	if (width != m_size[WINDOW_WIDTH]) {
		m_size[WINDOW_WIDTH] = width;	
	}
	
	if (height != m_size[WINDOW_HEIGHT]) {
		m_size[WINDOW_HEIGHT] = height;
	}
}

function Window::updateInfo() {
	// Getting the actual size (width and heigth) from the viewport
	var viewport = glGet(GL_VIEWPORT);
	setSize(viewport[2], viewport[3]);
	
	m_mouseWindowPos = [Mouse.X, Mouse.Y, 0];
	// Convert the window mouse coordinate in OpenGL coordinate
	m_mouseNearPos = gluUnProject([Mouse.X, height() - Mouse.Y, 0.0]);
	m_mouseFarPos = gluUnProject([Mouse.X, height() - Mouse.Y, 1.0]);
	m_centerNearPos = gluUnProject([width() / 2, height() / 2, 0.0]);
	m_centerFarPos = gluUnProject([width() / 2, height() / 2, 1.0]);
}

function Window::width() {
	return m_size.x;
}
 
#endif // WINDOW_H
