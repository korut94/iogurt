#ifndef DEFAULT_DEVICE_H
#define DEFAULT_DEVICE_H

#define LINE_CONSTANT 	0x10000
#define MOUSE_MOVE 		0x0200

#define KEY_PRESSED 	0x0100
#define KEY_A			0x41
#define KEY_D			0x44
#define KEY_S			0x53
#define KEY_W			0x57

#define ANGLE_SPEED		0.5

#include "id_parts.s3d"
#include "../command/move.s3d"
#include "../command/rotate.s3d"
#include "../human/id_parts.s3d"

/*
 * @brief The function defaultTranslation translates all events
 * relative to the mouse and keyboard in human interaction commands.
 * 
 * @return The tuple (status : bool, target : int, command : Command). 
 * If `status` is false so the event was ignored and the value of 
 * `command` is void, otherwise `command` reppresents the correct command
 * to apply.
 */
function deviceTranslation(eventId, wparam, lparam) {
	var command;
	
	if (eventId == KEY_PRESSED) {
		switch (wparam) {
			case KEY_D: command = {STATUS_ACCEPTED, BODY_ID, Move(1, [-1, 0, 0])}; break;
			case KEY_A: command = {STATUS_ACCEPTED, BODY_ID, Move(1, [1, 0, 0])}; break;
			case KEY_W: command = {STATUS_ACCEPTED, BODY_ID, Move(1, [0, 0, 1])}; break;
			case KEY_S: command = {STATUS_ACCEPTED, BODY_ID, Move(1, [0, 0, -1])}; break;
			default: command = EVENT_IGNORED;
		}
	} else if (eventId == MOUSE_MOVE) {
		// TODO: Replacing 320 and 231, the started position (x and y) of the mouse
		// (the center of the screen), with a function that gives the center window
		// coordinates.
		command = {
			STATUS_ACCEPTED,
			BODY_ID, 
			Rotate(-(Mouse.X - 320) * ANGLE_SPEED, -(Mouse.Y - 231) * ANGLE_SPEED)
		};
	} else {
		command = EVENT_IGNORED;
	}
	
	return command;
}

#endif // DEFAULT_DEVICE_H
