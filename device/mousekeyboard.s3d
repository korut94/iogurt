#ifndef MOUSE_KEYBOARD_H
#define MOUSE_KEYBOARD_H

#define LINE_CONSTANT 	0x10000
#define MOUSE_MOVE 		0x0200

#define KEY_PRESSED 	0x0100
#define KEY_RELEASED	0x0101
#define KEY_TAPPED		0x0102
#define KEY_A			0x41	
#define MAP_KEY_A 		0x00
#define KEY_D			0x44	
#define MAP_KEY_D 		0x01
#define KEY_S			0x53	
#define MAP_KEY_S 		0x02
#define KEY_W			0x57	
#define MAP_KEY_W 		0x03
#define COUNT_MAP_KEY	4

#define ANGLE_SPEED		0.5

#define WM_BORDER		11

#include "../command/command.s3d"
#include "../command/action/move.s3d"
#include "../command/action/rotate.s3d"
#include "../human/def.s3d"

class MouseKeyboard
{	
	/*
	 * @brief The keyboard status, when an item is true meaning that the relative
	 * key is hold pressed.
	 */
	var m_kbStatus;
	
	/*
	 * @brief The function will be invoked by the application when all events
	 * have been processed.
	 */
	restart();
	/*
	 * @brief The function translates all events relative to the mouse and 
	 * keyboard in human interaction commands and it pushes their into the
	 * queue commands.
	 */
	processEvent(eventId, wparam, lparam, queue, window);
};

function MouseKeyboard::MouseKeyboard() {
	m_kbStatus = Array(COUNT_MAP_KEY);
	
	m_kbStatus[MAP_KEY_A] = false;
	m_kbStatus[MAP_KEY_S] = false;
	m_kbStatus[MAP_KEY_D] = false;
	m_kbStatus[MAP_KEY_W] = false;
}

function MouseKeyboard::restart() {
	SetCursorPos(0.5, 0.5);
}

function MouseKeyboard::processEvent(eventId, wparam, lparam, queue, window) {
	if (eventId == KEY_PRESSED) {
		switch (wparam) {
			case KEY_D: {
				if (!m_kbStatus[MAP_KEY_D]) queue.push(Command(Move(0.1, [1, 0, 0]), BODY_ID));
				m_kbStatus[MAP_KEY_D] = true;
				break;
			}
			case KEY_A: {
				if (!m_kbStatus[MAP_KEY_A]) queue.push(Command(Move(0.1, [-1, 0, 0]), BODY_ID)); 
				m_kbStatus[MAP_KEY_A] = true;
				break;
			}
			case KEY_W: {
				if (!m_kbStatus[MAP_KEY_W]) queue.push(Command(Move(0.1, [0, 0, 1]), BODY_ID));
				m_kbStatus[MAP_KEY_W] = true;
				break;
			}
			case KEY_S: {
				if (!m_kbStatus[MAP_KEY_S]) queue.push(Command(Move(0.1, [0, 0, -1]), BODY_ID));
				m_kbStatus[MAP_KEY_S] = true;
				break;
			}
		}
	// The second condition need to avoid the false positive by the keyboard repetition
	} else if (eventId == KEY_RELEASED && !KeyPressed(wparam)) {
		switch (wparam) {
			case KEY_D: {
				queue.push(Command(Move(0, [1, 0, 0]), BODY_ID));
				m_kbStatus[MAP_KEY_D] = false;
				break;
			}
			case KEY_A: {
				queue.push(Command(Move(0, [-1, 0, 0]), BODY_ID)); 
				m_kbStatus[MAP_KEY_A] = false;
				break;
			}
			case KEY_W: {
				queue.push(Command(Move(0, [0, 0, 1]), BODY_ID));
				m_kbStatus[MAP_KEY_W] = false;
				break;
			}
			case KEY_S: {
				queue.push(Command(Move(0, [0, 0, -1]), BODY_ID));
				m_kbStatus[MAP_KEY_S] = false;
				break;
			}
		}
	} else if (eventId == MOUSE_MOVE) {
		var offX = window.getSize().x()/2;
		var offY = window.isFullScreen() ? window.getSize().y()/2 : (window.getSize().y()/2) - WM_BORDER;
		
		queue.push(Command(Rotate(-(Mouse.X - offX) * ANGLE_SPEED, 0), BODY_ID));
		queue.push(Command(Rotate(0, (Mouse.Y - offY) * 0.4), HEAD_ID));
	}
	
	// All other events are ignored completely
}

#endif // MOUSE_KEYBOARD_H
