#ifndef HUMAN_H
#define HUMAN_H

#include "../scene/object.s3d"
#include "def.s3d"
#include "view.s3d"

class Human
{
	var m_parts;
	
	getParts();
	getView();
	processCommands(queue);
	processCommand(command);
	setPosition(pos, id);
};

function Human::Human() {
	m_parts = Array(N_PARTS);
	
	// Root of the human character
	m_parts[BODY_ID] = Object();
	m_parts[HEAD_ID] = Object();
	
	// Block the head to the body
	m_parts[BODY_ID].getCVmObj().AddChild(m_parts[HEAD_ID].getCVmObj());
}

function Human::getParts() {
	return m_parts;
}

function Human::getView() {
	var head = m_parts[HEAD_ID];
	var body = m_parts[BODY_ID];
	
	var pView = View();
	pView.position = body.getCVmObj().LocalToWorld(head.getCVmObj().GetPosition());
	
	var dirHead = head.getDirection();
	var dirBody = body.getDirection();
	
	// TODO: Give a better result of the direction. The below result is completly random.
	pView.direction = [dirBody[0], dirHead[1], dirBody[2] - dirHead[1]];
	
	return pView;
}

function Human::processCommand(command) {
	command.action().apply(m_parts[command.target()]);
}

function Human::processCommands(queue) {
	while (!queue.isEmpty()) {
		processCommand(queue.pop());
	}
}

function Human::setPosition(pos, id) {
	m_parts[id].getCVmObj().setPosition(pos);
}

#endif // HUMAN_H
