#ifndef MOBJHANDLETRANSLATE_H
#define MOBJHANDLETRANSLATE_H

#include "../../../../scene/object.s3d"
#include "../frame.s3d"
#include "../label.s3d"
#include "mobjsetter.s3d"

class MObjHandleTranslate : Object
{
	var m_lbl;
	var m_setterX;
	var m_setterY;
	var m_setterZ;
	var m_target;
	
	applyTo(world);
	init();
	translateX();
	translateY();
	translateZ();
};

function MObjHandleTranslate::MObjHandleTranslate(obj) {
	m_lbl = Label("Translate", [0.035, 0.035, 0.035], [0.9, 0.9, 0.9]);
	m_setterX = MObjSetter("X");
	m_setterY = MObjSetter("Y");
	m_setterZ = MObjSetter("Z");
	m_target = obj;
	
	m_setterX.linkToIncrement(Caller(MObjHandleTranslate::this, "translateX"));
	m_setterY.linkToIncrement(Caller(MObjHandleTranslate::this, "translateY"));
	m_setterZ.linkToIncrement(Caller(MObjHandleTranslate::this, "translateZ"));
	
	MObjHandleTranslate::this.getCVmObj().AddChild(m_lbl.getCVmObj());
	MObjHandleTranslate::this.getCVmObj().AddChild(m_setterX.getCVmObj());
	MObjHandleTranslate::this.getCVmObj().AddChild(m_setterY.getCVmObj());
	MObjHandleTranslate::this.getCVmObj().AddChild(m_setterZ.getCVmObj());
}

function MObjHandleTranslate::applyTo(world) {
	m_setterX.applyTo(world);
	m_setterY.applyTo(world);
	m_setterZ.applyTo(world);
}

function MObjHandleTranslate::init() {
	m_setterX.init();
	m_setterY.init();
	m_setterZ.init();
	
	m_lbl.getCVmObj().SetPosition([0.085, 0.07, 0]);
	m_setterX.getCVmObj().SetPosition([0, 0.04, 0]);
	// m_setterY.getCVmObj().SetPosition([0, 0, 0]);
	m_setterZ.getCVmObj().SetPosition([0, -0.04, 0]);
}

function MObjHandleTranslate::translateX() {
	m_target.Move([0.1, 0, 0]);
}

function MObjHandleTranslate::translateY() {
	m_target.Move([0, 1, 0]);
}

function MObjHandleTranslate::translateZ() {
	m_target.Move([0, 0, 1]);
}

#endif // MOBJHANDLETRANSLATE_H
