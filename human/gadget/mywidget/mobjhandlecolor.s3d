#ifndef MOBJHANDLECOLOR_H
#define MOBJHANDLECOLOR_H

#include "../../../interface/frame.s3d"
#include "../../../interface/label.s3d"
#include "../../../scene/object.s3d"
#include "mobjsetter.s3d"

class MObjHandleColor : Object
{
	var m_color;
	var m_lbl;
	var m_setterR;
	var m_setterG;
	var m_setterB;
	var m_target;
	
	applyTo(world);
	displayR();
	displayG();
	displayB();
	init();
	removeFrom(world);
	color(opts);
};

function MObjHandleColor::MObjHandleColor(obj) {
	m_color = [0,0,0,1];
	m_lbl = Label("Color", [0.035, 0.035, 0.035], [0.9, 0.9, 0.9]);
	m_target = obj;
	m_setterR = MObjSetter(
		"R",
		Caller(MObjHandleColor::this, "color", {[0.001,0,0]}),
		Caller(MObjHandleColor::this, "color", {[-0.001,0,0]}),
		Caller(MObjHandleColor::this, "displayR")
	);
	m_setterG = MObjSetter(
		"G",
		Caller(MObjHandleColor::this, "color", {[0,0.001,0]}),
		Caller(MObjHandleColor::this, "color", {[0,-0.001,0]}),
		Caller(MObjHandleColor::this, "displayG")
	);
	m_setterB = MObjSetter(
		"B",
		Caller(MObjHandleColor::this, "color", {[0,0,0.001]}),
		Caller(MObjHandleColor::this, "color", {[0,0,-0.001]}),
		Caller(MObjHandleColor::this, "displayB")
	);
	
	MObjHandleColor::this.getCVmObj().AddChild(m_lbl.getCVmObj());
	MObjHandleColor::this.getCVmObj().AddChild(m_setterR.getCVmObj());
	MObjHandleColor::this.getCVmObj().AddChild(m_setterG.getCVmObj());
	MObjHandleColor::this.getCVmObj().AddChild(m_setterB.getCVmObj());
}

function MObjHandleColor::applyTo(world) {
	m_setterR.applyTo(world);
	m_setterG.applyTo(world);
	m_setterB.applyTo(world);
}

function MObjHandleColor::displayR() {
	return m_color[0];
}

function MObjHandleColor::displayG() {
	return m_color[1];
}

function MObjHandleColor::displayB() {
	return m_color[2];
}

function MObjHandleColor::init() {
	m_setterR.init();
	m_setterG.init();
	m_setterB.init();
	
	m_lbl.getCVmObj().SetPosition([0.085, 0.07, 0]);
	m_setterR.getCVmObj().SetPosition([0, 0.04, 0]);
	// m_setterG.getCVmObj().SetPosition([0, 0, 0]);
    m_setterB.getCVmObj().SetPosition([0, -0.04, 0]);
}

function MObjHandleColor::removeFrom(world) {
	m_setterR.removeFrom(world);
	m_setterG.removeFrom(world);
	m_setterB.removeFrom(world);
}

function MObjHandleColor::color(opts) {
	m_color = m_color + opts[1];
	
	if (m_color[0] < -1) m_color[0] = -1;
	else if (m_color[0] > 1) m_color[0] = 1;
	if (m_color[1] < -1) m_color[1] = -1;
	else if (m_color[1] > 1) m_color[1] = 1;
	if (m_color[2] < -1) m_color[2] = -1;
	else if (m_color[2] > 1) m_color[2] = 1;
	
	var material = CVmMaterial();
	material.Ambient = m_color;
	
	m_target.GetMesh().ForceMaterial(material);
}

#endif // MOBJHANDLECOLOR_H
