#ifndef BHWIDGET_H
#define BHWIDGET_H

#include "../../scene/behavior/mono.s3d"

class BHWidget : Mono
{
	var m_distanceFromPointer;
	var m_firstPress;
	var m_sensPress;
	var m_start;
	var m_wasPressed;
	
	var m_widget;
	
	onEnter(pointer, contactPoint);
	onExit();
	onHover(pointer, contactPoint);
};

function BHWidget::BHWidget(widget) {
	m_distanceFromPointer = 0;
	m_firstPress = true;
	m_sensPress = 0.05;
	m_start = [0,0,0];
	m_wasPressed = false;
	
	m_widget = widget;
}

function BHWidget::onEnter(pointer, contactPoint) {
	m_distanceFromPointer = (globalPosition(m_widget.getCVmObj()) - pointer)  * forward(m_widget.getCVmObj());
}

function BHWidget::onExit() {
	m_wasPressed = false;
	m_firstPress = true;
	this.onRelease();
}

function BHWidget::onHover(pointer, contactPoint) {
	var distance = (globalPosition(m_widget.getCVmObj()) - pointer)  * forward(m_widget.getCVmObj());
	
	// Check press behavior	
	if (m_sensPress < m_distanceFromPointer - distance) {
		m_wasPressed = true;
		this.onPress(m_distanceFromPointer - distance, contactPoint);
		
		// Check drag behavior
		if (m_firstPress) {
			m_firstPress = false;
			m_start = contactPoint;
		} else {
			var delta = contactPoint - m_start;
			// Get the right and up components from the vector delta. Remember that the interface is yawed
			// by 180 degree so the panel's right is the user's left and viceversa.
			this.onDrag(-delta * rightward(m_widget.getCVmObj()), delta * upward(m_widget.getCVmObj()));
		}
	// Check release behavior
	} else if (m_wasPressed) {
		m_wasPressed = false;
		m_firstPress = true;
		this.onRelease(contactPoint);
	}
}

#endif // BHWIDGET_H
